import { tursoClient } from './lib/tursoClient.js';
import crypto from 'crypto';

async function setupProcesosComplete() {
  try {
    console.log('üîÑ Configurando sistema completo de procesos...');
    
    // 1. Recrear tabla procesos con estructura completa
    console.log('üìä Recreando tabla procesos...');
    await tursoClient.execute('DROP TABLE IF EXISTS procesos');
    
    await tursoClient.execute(`
      CREATE TABLE procesos (
        id TEXT PRIMARY KEY,
        codigo TEXT NOT NULL UNIQUE,
        nombre TEXT NOT NULL,
        descripcion TEXT,
        tipo TEXT DEFAULT 'proceso',
        responsable TEXT,
        entradas TEXT,
        salidas TEXT,
        indicadores TEXT,
        documentos_relacionados TEXT,
        estado TEXT DEFAULT 'activo',
        version TEXT DEFAULT '1.0',
        objetivo TEXT,
        alcance TEXT,
        descripcion_detallada TEXT,
        fecha_creacion TEXT NOT NULL,
        fecha_actualizacion TEXT
      )
    `);
    
    console.log('‚úÖ Tabla procesos creada exitosamente');
    
    // 2. Insertar los procesos especificados
    const procesos = [
      {
        codigo: 'SAT-01',
        nombre: 'Satisfacci√≥n del Cliente',
        objetivo: 'Medir, evaluar y mejorar la satisfacci√≥n de los clientes respecto a los productos y servicios brindados por la organizaci√≥n.',
        alcance: 'Aplica a todos los puntos de contacto con el cliente, desde la preventa hasta el servicio postventa.',
        descripcion_detallada: 'El proceso contempla encuestas de satisfacci√≥n, an√°lisis de quejas y sugerencias, reuniones de feedback, y acciones correctivas derivadas de los resultados. Se vincula con los indicadores de calidad y es revisado trimestralmente.',
        tipo: 'estrat√©gico',
        responsable: 'Gerencia de Calidad',
        entradas: 'Encuestas, quejas, sugerencias, feedback',
        salidas: 'Informes de satisfacci√≥n, planes de mejora, acciones correctivas',
        indicadores: '√çndice de satisfacci√≥n del cliente, tiempo de respuesta a quejas',
        documentos_relacionados: 'Procedimiento de atenci√≥n al cliente, formularios de encuestas'
      },
      {
        codigo: 'AUD-01',
        nombre: 'Auditor√≠as Internas',
        objetivo: 'Evaluar la conformidad del sistema de gesti√≥n con los requisitos de la norma ISO 9001:2015 y detectar oportunidades de mejora.',
        alcance: 'Involucra todos los departamentos y procesos documentados en el sistema de gesti√≥n de la calidad.',
        descripcion_detallada: 'Las auditor√≠as se planifican anualmente y se ejecutan conforme a un programa aprobado por la direcci√≥n. Se asignan auditores independientes, se documentan hallazgos y se realiza seguimiento a las acciones correctivas.',
        tipo: 'apoyo',
        responsable: 'Auditor Interno L√≠der',
        entradas: 'Programa de auditor√≠a, procedimientos, registros',
        salidas: 'Informes de auditor√≠a, no conformidades, oportunidades de mejora',
        indicadores: 'Porcentaje de cumplimiento, tiempo de cierre de no conformidades',
        documentos_relacionados: 'Procedimiento de auditor√≠as internas, listas de verificaci√≥n'
      },
      {
        codigo: 'RH-01',
        nombre: 'Gesti√≥n de Recursos Humanos',
        objetivo: 'Gestionar eficazmente la incorporaci√≥n, desarrollo y retenci√≥n del personal necesario para el cumplimiento de los objetivos organizacionales.',
        alcance: 'Aplica desde el reclutamiento hasta la desvinculaci√≥n, incluyendo formaci√≥n, evaluaci√≥n y clima laboral.',
        descripcion_detallada: 'Se definen perfiles de puesto, se administran procesos de selecci√≥n, inducci√≥n, capacitaciones y evaluaciones de desempe√±o. Se gestiona el legajo digital del personal y la documentaci√≥n legal correspondiente.',
        tipo: 'apoyo',
        responsable: 'Jefe de Recursos Humanos',
        entradas: 'Solicitudes de personal, CV, evaluaciones, capacitaciones',
        salidas: 'Personal capacitado, evaluaciones de desempe√±o, registros de capacitaci√≥n',
        indicadores: 'Rotaci√≥n de personal, horas de capacitaci√≥n, satisfacci√≥n laboral',
        documentos_relacionados: 'Perfiles de puesto, procedimiento de selecci√≥n, plan de capacitaci√≥n'
      },
      {
        codigo: 'DOC-01',
        nombre: 'Gesti√≥n de la Documentaci√≥n',
        objetivo: 'Controlar la creaci√≥n, revisi√≥n, aprobaci√≥n, distribuci√≥n y resguardo de la documentaci√≥n del sistema de gesti√≥n.',
        alcance: 'Aplica a todos los documentos controlados, incluyendo procedimientos, instructivos, registros y formularios.',
        descripcion_detallada: 'Se implementa un sistema digital de control documental con permisos por rol. Los documentos tienen versi√≥n, fecha de revisi√≥n y responsable asignado. Se asegura la trazabilidad y la eliminaci√≥n controlada de documentos obsoletos.',
        tipo: 'apoyo',
        responsable: 'Coordinador de Calidad',
        entradas: 'Documentos nuevos, solicitudes de cambio, revisiones',
        salidas: 'Documentos controlados, listado maestro, documentos obsoletos',
        indicadores: 'Documentos vigentes vs obsoletos, tiempo de aprobaci√≥n',
        documentos_relacionados: 'Procedimiento de control de documentos, listado maestro de documentos'
      }
    ];
    
    console.log('üìù Insertando procesos...');
    
    for (const proceso of procesos) {
      const id = crypto.randomUUID();
      const fechaCreacion = new Date().toISOString();
      
      await tursoClient.execute({
        sql: `INSERT INTO procesos (
                id, codigo, nombre, descripcion, tipo, responsable, 
                entradas, salidas, indicadores, documentos_relacionados, 
                estado, version, objetivo, alcance, descripcion_detallada,
                fecha_creacion
              ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        args: [
          id,
          proceso.codigo,
          proceso.nombre,
          proceso.objetivo, // usando objetivo como descripci√≥n principal
          proceso.tipo,
          proceso.responsable,
          proceso.entradas,
          proceso.salidas,
          proceso.indicadores,
          proceso.documentos_relacionados,
          'activo',
          '1.0',
          proceso.objetivo,
          proceso.alcance,
          proceso.descripcion_detallada,
          fechaCreacion
        ]
      });
      
      console.log(`‚úÖ Proceso insertado: ${proceso.codigo} - ${proceso.nombre}`);
    }
    
    // 3. Verificar datos insertados
    const result = await tursoClient.execute('SELECT codigo, nombre, tipo, estado FROM procesos ORDER BY codigo');
    console.log('\nüìã Procesos creados:');
    result.rows.forEach(row => {
      console.log(`  ‚Ä¢ ${row.codigo} - ${row.nombre} (${row.tipo})`);
    });
    
    console.log(`\nüéâ Sistema de procesos configurado exitosamente con ${result.rows.length} procesos`);
    
  } catch (error) {
    console.error('‚ùå Error al configurar sistema de procesos:', error);
    throw error;
  }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  setupProcesosComplete()
    .then(() => {
      console.log('‚úÖ Configuraci√≥n completada');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error:', error);
      process.exit(1);
    });
}

export { setupProcesosComplete };
