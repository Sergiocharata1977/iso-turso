import { tursoClient } from '../lib/tursoClient.js';

async function crearTablaPoliticaCalidad() {
  try {
    console.log('üîÑ Recreando tabla de pol√≠tica de calidad como ABM...');
    
    // Eliminar tabla anterior si existe
    await tursoClient.execute('DROP TABLE IF EXISTS identificacion_procesos');
    
    // Crear nueva tabla con estructura ABM
    await tursoClient.execute(`
      CREATE TABLE politica_calidad (
        id TEXT PRIMARY KEY DEFAULT ('politica_' || lower(hex(randomblob(8)))),
        organization_id INTEGER NOT NULL DEFAULT 1,
        nombre TEXT NOT NULL,
        politica_calidad TEXT,
        alcance TEXT,
        mapa_procesos TEXT,
        organigrama TEXT,
        estado TEXT DEFAULT 'activo',
        created_at DATETIME DEFAULT (datetime('now', 'localtime')),
        updated_at DATETIME DEFAULT (datetime('now', 'localtime'))
      )
    `);
    
    console.log('‚úÖ Tabla politica_calidad creada exitosamente');
    
    // Insertar algunos registros de ejemplo
    const politicasEjemplo = [
      {
        nombre: 'Pol√≠tica de Calidad Principal',
        politica_calidad: 'Compromiso con la excelencia en todos nuestros procesos y servicios, enfocados en la satisfacci√≥n del cliente y la mejora continua.',
        alcance: 'Aplica a todos los procesos de la organizaci√≥n, desde la planificaci√≥n hasta la entrega al cliente.',
        mapa_procesos: 'Descripci√≥n de la interrelaci√≥n entre los procesos principales de la organizaci√≥n.',
        organigrama: 'Estructura organizacional que define roles, responsabilidades y l√≠neas de autoridad.'
      },
      {
        nombre: 'Pol√≠tica de Calidad Operativa',
        politica_calidad: 'Enfoque en la eficiencia operativa y la optimizaci√≥n de recursos para maximizar la calidad del servicio.',
        alcance: 'Procesos operativos y de producci√≥n de la organizaci√≥n.',
        mapa_procesos: 'Mapa detallado de procesos operativos y sus interrelaciones.',
        organigrama: 'Estructura operativa con roles y responsabilidades espec√≠ficas.'
      },
      {
        nombre: 'Pol√≠tica de Calidad de Servicio',
        politica_calidad: 'Orientaci√≥n hacia la excelencia en el servicio al cliente y la creaci√≥n de valor sostenible.',
        alcance: 'Servicios al cliente y procesos de atenci√≥n.',
        mapa_procesos: 'Procesos de servicio y atenci√≥n al cliente.',
        organigrama: 'Equipos de servicio y atenci√≥n al cliente.'
      }
    ];

    for (const politica of politicasEjemplo) {
      await tursoClient.execute({
        sql: `INSERT INTO politica_calidad (
          organization_id, nombre, politica_calidad, alcance, mapa_procesos, organigrama
        ) VALUES (?, ?, ?, ?, ?, ?)`,
        args: [
          1,
          politica.nombre,
          politica.politica_calidad,
          politica.alcance,
          politica.mapa_procesos,
          politica.organigrama
        ]
      });
    }
    
    console.log(`‚úÖ ${politicasEjemplo.length} pol√≠ticas de ejemplo insertadas`);
    
    // Verificar la estructura creada
    const tableInfo = await tursoClient.execute('PRAGMA table_info(politica_calidad)');
    console.log('\nüìã Estructura de la tabla:');
    tableInfo.rows.forEach(col => {
      console.log(`   - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
    });
    
    // Verificar datos insertados
    const count = await tursoClient.execute('SELECT COUNT(*) as total FROM politica_calidad');
    console.log(`\nüìä Total de pol√≠ticas creadas: ${count.rows[0].total}`);
    
    console.log('\nüéâ Tabla de pol√≠tica de calidad configurada como ABM completo');
    
  } catch (error) {
    console.error('‚ùå Error al crear tabla de pol√≠tica de calidad:', error);
    throw error;
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  crearTablaPoliticaCalidad()
    .then(() => {
      console.log('‚úÖ Script completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error en el script:', error);
      process.exit(1);
    });
}

export default crearTablaPoliticaCalidad; 