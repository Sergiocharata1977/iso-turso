import { createClient } from '@libsql/client';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
dotenv.config({ path: '.env' });

const db = createClient({
  url: process.env.TURSO_DATABASE_URL,
  authToken: process.env.TURSO_AUTH_TOKEN
});

async function fixPasswordHash() {
  const email = 'admin@demo.com';
  const password = 'admin123';

  try {
    console.log('üîß GENERANDO HASH CORRECTO PARA LA CONTRASE√ëA...');
    
    // 1. Generar hash correcto con bcrypt
    console.log(`[1/3] üîê Generando hash para contrase√±a: "${password}"`);
    const saltRounds = 10;
    const correctHash = await bcrypt.hash(password, saltRounds);
    console.log(`  [‚úÖ OK] Hash generado: ${correctHash}`);

    // 2. Verificar que el hash funciona
    console.log('[2/3] ‚úÖ Verificando que el hash funciona...');
    const isValid = await bcrypt.compare(password, correctHash);
    console.log(`  [INFO] Verificaci√≥n: ${isValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
    
    if (!isValid) {
      throw new Error('El hash generado no es v√°lido');
    }

    // 3. Actualizar el usuario en la base de datos
    console.log('[3/3] üíæ Actualizando usuario en la base de datos...');
    const result = await db.execute({
      sql: 'UPDATE usuarios SET password_hash = ? WHERE email = ?',
      args: [correctHash, email]
    });
    
    console.log(`  [‚úÖ OK] Usuario actualizado. Filas afectadas: ${result.rowsAffected}`);

    console.log('\nüéâ ¬°HASH CORREGIDO EXITOSAMENTE!');
    console.log('='.repeat(50));
    console.log('  CREDENCIALES PARA PROBAR:');
    console.log(`  üìß Email: ${email}`);
    console.log(`  üîë Password: ${password}`);
    console.log('='.repeat(50));

  } catch (error) {
    console.error('\n‚ùå ERROR AL CORREGIR EL HASH:', error);
  } finally {
    await db.close();
  }
}

fixPasswordHash();
