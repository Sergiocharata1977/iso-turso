import { tursoClient } from './lib/tursoClient.js';

async function testPoliticaCalidad() {
  try {
    console.log('üß™ Probando sistema ABM de Pol√≠tica de Calidad...\n');

    // 1. Verificar que la tabla existe
    console.log('1Ô∏è‚É£ Verificando estructura de la tabla...');
    const tableInfo = await tursoClient.execute('PRAGMA table_info(politica_calidad)');
    console.log('‚úÖ Tabla encontrada con columnas:');
    tableInfo.rows.forEach(col => {
      console.log(`   - ${col.name}: ${col.type}`);
    });

    // 2. Verificar datos existentes
    console.log('\n2Ô∏è‚É£ Verificando datos existentes...');
    const existingData = await tursoClient.execute({
      sql: 'SELECT * FROM politica_calidad WHERE organization_id = ?',
      args: [1]
    });

    if (existingData.rows.length > 0) {
      console.log(`‚úÖ ${existingData.rows.length} pol√≠ticas de calidad encontradas:`);
      existingData.rows.forEach((politica, index) => {
        console.log(`   ${index + 1}. ${politica.nombre} (${politica.estado})`);
        console.log(`      - Pol√≠tica: ${politica.politica_calidad ? 'S√≠' : 'No'}`);
        console.log(`      - Alcance: ${politica.alcance ? 'S√≠' : 'No'}`);
        console.log(`      - Mapa: ${politica.mapa_procesos ? 'S√≠' : 'No'}`);
        console.log(`      - Organigrama: ${politica.organigrama ? 'S√≠' : 'No'}`);
      });
    } else {
      console.log('‚ÑπÔ∏è No hay pol√≠ticas de calidad existentes');
    }

    // 3. Probar operaci√≥n ALTA (crear nueva pol√≠tica)
    console.log('\n3Ô∏è‚É£ Probando operaci√≥n ALTA...');
    
    const nuevaPolitica = {
      nombre: 'Pol√≠tica de Calidad de Prueba ABM',
      politica_calidad: 'Pol√≠tica de prueba para verificar el sistema ABM completo.',
      alcance: 'Alcance de prueba para el sistema ABM.',
      mapa_procesos: 'Mapa de procesos de prueba para ABM.',
      organigrama: 'Organigrama de prueba para ABM.'
    };

    const insertResult = await tursoClient.execute({
      sql: `INSERT INTO politica_calidad (
        organization_id, nombre, politica_calidad, alcance, mapa_procesos, organigrama
      ) VALUES (?, ?, ?, ?, ?, ?) RETURNING *`,
      args: [
        1,
        nuevaPolitica.nombre,
        nuevaPolitica.politica_calidad,
        nuevaPolitica.alcance,
        nuevaPolitica.mapa_procesos,
        nuevaPolitica.organigrama
      ]
    });
    
    console.log('‚úÖ Nueva pol√≠tica creada con ID:', insertResult.rows[0].id);

    // 4. Probar operaci√≥n MODIFICACI√ìN (actualizar pol√≠tica)
    console.log('\n4Ô∏è‚É£ Probando operaci√≥n MODIFICACI√ìN...');
    
    const politicaId = insertResult.rows[0].id;
    const updateResult = await tursoClient.execute({
      sql: `UPDATE politica_calidad 
            SET nombre = ?, politica_calidad = ?, estado = ?, updated_at = datetime('now', 'localtime')
            WHERE id = ? RETURNING *`,
      args: [
        'Pol√≠tica de Calidad Actualizada',
        'Pol√≠tica actualizada para probar la modificaci√≥n.',
        'activo',
        politicaId
      ]
    });
    
    console.log('‚úÖ Pol√≠tica actualizada:', updateResult.rows[0].nombre);

    // 5. Verificar datos finales
    console.log('\n5Ô∏è‚É£ Verificando datos finales...');
    const finalData = await tursoClient.execute({
      sql: 'SELECT * FROM politica_calidad WHERE organization_id = ? ORDER BY created_at DESC',
      args: [1]
    });

    console.log(`‚úÖ Total de pol√≠ticas de calidad: ${finalData.rows.length}`);
    finalData.rows.forEach((politica, index) => {
      console.log(`   ${index + 1}. ${politica.nombre} (${politica.estado})`);
      console.log(`      - Creado: ${politica.created_at}`);
      console.log(`      - Actualizado: ${politica.updated_at}`);
    });

    // 6. Probar operaci√≥n BAJA (eliminar pol√≠tica de prueba)
    console.log('\n6Ô∏è‚É£ Probando operaci√≥n BAJA...');
    
    const deleteResult = await tursoClient.execute({
      sql: 'DELETE FROM politica_calidad WHERE id = ?',
      args: [politicaId]
    });
    
    console.log('‚úÖ Pol√≠tica de prueba eliminada');

    console.log('\nüéâ ¬°Sistema ABM de Pol√≠tica de Calidad funcionando correctamente!');
    console.log('üìã El sistema est√° listo para usar con operaciones de Alta, Baja y Modificaci√≥n.');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
    process.exit(1);
  }
}

// Ejecutar la prueba
testPoliticaCalidad()
  .then(() => {
    console.log('\n‚úÖ Script de prueba finalizado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en el script:', error);
    process.exit(1);
  }); 