import { tursoClient } from './lib/tursoClient.js';

async function createAdminUser() {
  try {
    console.log('üë§ Creando usuario administrador...');
    
    // Crear usuario con contrase√±a simple (sin hash por ahora)
    const email = 'admin@test.com';
    const password = '123456';
    const name = 'Admin Test';
    const role = 'admin';
    const organizationId = 20;
    
    // Para simplificar, vamos a usar la contrase√±a sin hash primero
    // En un entorno real deber√≠as usar bcrypt
    
    const result = await tursoClient.execute({
      sql: `INSERT INTO usuarios (
        organization_id, name, email, password_hash, role, is_active, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))`,
      args: [organizationId, name, email, password, role, 1]
    });
    
    console.log('‚úÖ Usuario creado exitosamente!');
    console.log(`üìß Email: ${email}`);
    console.log(`üîë Contrase√±a: ${password}`);
    console.log(`üë§ Nombre: ${name}`);
    console.log(`üéØ Rol: ${role}`);
    console.log(`üè¢ Organization ID: ${organizationId}`);
    
    // Verificar que se cre√≥ correctamente
    const verification = await tursoClient.execute({
      sql: 'SELECT id, email, name, role FROM usuarios WHERE email = ?',
      args: [email]
    });
    
    if (verification.rows.length > 0) {
      console.log('\n‚úÖ Verificaci√≥n exitosa - Usuario encontrado en la base de datos');
      console.log(`ID: ${verification.rows[0].id}`);
    } else {
      console.log('‚ùå Error: Usuario no encontrado despu√©s de la creaci√≥n');
    }
    
  } catch (error) {
    console.error('‚ùå Error creando usuario:', error.message);
  }
}

createAdminUser(); 