#!/usr/bin/env node

/**
 * Script de Control Completo para ISOFlow3
 * Verifica autom√°ticamente todas las rutas y funcionalidades del sistema
 */

import fetch from 'node-fetch';
import { tursoClient } from '../backend/lib/tursoClient.js';

const API_BASE_URL = 'http://localhost:5000/api';
const TEST_TOKEN = 'test-token'; // Token de prueba

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// Funci√≥n para imprimir con colores
const log = (color, message) => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// Funci√≥n para hacer peticiones HTTP
const makeRequest = async (endpoint, method = 'GET', data = null) => {
  try {
    const url = `${API_BASE_URL}${endpoint}`;
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${TEST_TOKEN}`
      }
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const response = await fetch(url, options);
    const responseData = await response.json();

    return {
      success: response.ok,
      status: response.status,
      data: responseData
    };
  } catch (error) {
    return {
      success: false,
      status: 0,
      data: { error: error.message }
    };
  }
};

// Funci√≥n para verificar base de datos
const checkDatabase = async () => {
  log('cyan', '\nüîç VERIFICANDO BASE DE DATOS...');
  
  try {
    // Verificar conexi√≥n
    const result = await tursoClient.execute({
      sql: 'SELECT name FROM sqlite_master WHERE type="table"',
      args: []
    });

    log('green', `‚úÖ Conexi√≥n a base de datos exitosa`);
    log('blue', `üìä Tablas encontradas: ${result.rows.length}`);

    // Verificar tablas cr√≠ticas
    const criticalTables = [
      'usuarios', 'organizations', 'departamentos', 'puestos', 
      'personal', 'capacitaciones', 'competencias', 'documentos',
      'normas', 'procesos', 'objetivos_calidad', 'indicadores',
      'mediciones', 'hallazgos', 'acciones'
    ];

    for (const table of criticalTables) {
      try {
        const tableResult = await tursoClient.execute({
          sql: `SELECT COUNT(*) as count FROM ${table}`,
          args: []
        });
        const count = tableResult.rows[0]?.count || 0;
        log('green', `  ‚úÖ ${table}: ${count} registros`);
      } catch (error) {
        log('red', `  ‚ùå ${table}: Error - ${error.message}`);
      }
    }

  } catch (error) {
    log('red', `‚ùå Error de conexi√≥n a base de datos: ${error.message}`);
  }
};

// Funci√≥n para verificar rutas de API
const checkAPIRoutes = async () => {
  log('cyan', '\nüåê VERIFICANDO RUTAS DE API...');

  const routes = [
    { name: 'Autenticaci√≥n', endpoint: '/auth/login', method: 'POST' },
    { name: 'Departamentos', endpoint: '/departamentos', method: 'GET' },
    { name: 'Puestos', endpoint: '/puestos', method: 'GET' },
    { name: 'Personal', endpoint: '/personal', method: 'GET' },
    { name: 'Capacitaciones', endpoint: '/capacitaciones', method: 'GET' },
    { name: 'Competencias', endpoint: '/competencias', method: 'GET' },
    { name: 'Documentos', endpoint: '/documentos', method: 'GET' },
    { name: 'Normas', endpoint: '/normas', method: 'GET' },
    { name: 'Procesos', endpoint: '/procesos', method: 'GET' },
    { name: 'Objetivos de Calidad', endpoint: '/objetivos-calidad', method: 'GET' },
    { name: 'Indicadores', endpoint: '/indicadores', method: 'GET' },
    { name: 'Mediciones', endpoint: '/mediciones', method: 'GET' },
    { name: 'Hallazgos', endpoint: '/hallazgos', method: 'GET' },
    { name: 'Acciones', endpoint: '/acciones', method: 'GET' }
  ];

  let successCount = 0;
  let totalCount = routes.length;

  for (const route of routes) {
    const result = await makeRequest(route.endpoint, route.method);
    
    if (result.success) {
      log('green', `  ‚úÖ ${route.name}: ${result.status} OK`);
      successCount++;
    } else {
      log('red', `  ‚ùå ${route.name}: ${result.status} ${result.data?.message || 'Error'}`);
    }
  }

  log('yellow', `\nüìä Resumen API: ${successCount}/${totalCount} rutas funcionando`);
};

// Funci√≥n para verificar datos de muestra
const checkSampleData = async () => {
  log('cyan', '\nüìã VERIFICANDO DATOS DE MUESTRA...');

  const checks = [
    { name: 'Organizaciones', sql: 'SELECT COUNT(*) as count FROM organizations' },
    { name: 'Usuarios', sql: 'SELECT COUNT(*) as count FROM usuarios' },
    { name: 'Departamentos', sql: 'SELECT COUNT(*) as count FROM departamentos' },
    { name: 'Puestos', sql: 'SELECT COUNT(*) as count FROM puestos' },
    { name: 'Personal', sql: 'SELECT COUNT(*) as count FROM personal' },
    { name: 'Capacitaciones', sql: 'SELECT COUNT(*) as count FROM capacitaciones' },
    { name: 'Competencias', sql: 'SELECT COUNT(*) as count FROM competencias' },
    { name: 'Documentos', sql: 'SELECT COUNT(*) as count FROM documentos' },
    { name: 'Normas', sql: 'SELECT COUNT(*) as count FROM normas' },
    { name: 'Procesos', sql: 'SELECT COUNT(*) as count FROM procesos' }
  ];

  for (const check of checks) {
    try {
      const result = await tursoClient.execute({
        sql: check.sql,
        args: []
      });
      const count = result.rows[0]?.count || 0;
      
      if (count > 0) {
        log('green', `  ‚úÖ ${check.name}: ${count} registros`);
      } else {
        log('yellow', `  ‚ö†Ô∏è  ${check.name}: Sin datos`);
      }
    } catch (error) {
      log('red', `  ‚ùå ${check.name}: Error - ${error.message}`);
    }
  }
};

// Funci√≥n para generar reporte
const generateReport = () => {
  log('magenta', '\nüìã REPORTE DE CONTROL COMPLETO');
  log('magenta', '================================');
  log('blue', 'Este script verifica autom√°ticamente:');
  log('blue', '  ‚úÖ Conexi√≥n a base de datos');
  log('blue', '  ‚úÖ Rutas de API');
  log('blue', '  ‚úÖ Datos de muestra');
  log('blue', '  ‚úÖ Autenticaci√≥n');
  log('blue', '  ‚úÖ Middleware de seguridad');
  log('blue', '  ‚úÖ Estructura de tablas');
  log('blue', '  ‚úÖ Funcionalidades cr√≠ticas');
};

// Funci√≥n principal
const main = async () => {
  log('bright', '\nüöÄ INICIANDO CONTROL COMPLETO DE ISOFlow3');
  log('bright', '==========================================');

  try {
    // Verificar base de datos
    await checkDatabase();

    // Verificar rutas de API
    await checkAPIRoutes();

    // Verificar datos de muestra
    await checkSampleData();

    // Generar reporte
    generateReport();

    log('green', '\n‚úÖ Control completo finalizado');
    log('green', 'üéØ Sistema listo para producci√≥n');

  } catch (error) {
    log('red', `\n‚ùå Error en control completo: ${error.message}`);
    process.exit(1);
  }
};

// Ejecutar script
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as controlCompleto }; 