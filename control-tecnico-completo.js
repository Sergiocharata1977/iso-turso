#!/usr/bin/env node

/**
 * üîç CONTROL T√âCNICO COMPLETO - ISOFlow3
 * =====================================
 * 
 * Script de an√°lisis t√©cnico integral del sistema
 * Genera reporte completo del estado del proyecto
 * 
 * Ejecutar: node control-tecnico-completo.js
 */

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { fileURLToPath } from 'url';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuraci√≥n de colores para consola
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
  dim: '\x1b[2m'
};

// Funci√≥n para imprimir con colores
function print(color, text, indent = 0) {
  const spaces = ' '.repeat(indent);
  console.log(`${spaces}${color}${text}${colors.reset}`);
}

// Funci√≥n para crear separadores visuales
function separator(title, symbol = '=') {
  const line = symbol.repeat(60);
  print(colors.cyan + colors.bold, `\n${line}`);
  print(colors.cyan + colors.bold, `${title.toUpperCase()}`);
  print(colors.cyan + colors.bold, line);
}

// Funci√≥n para ejecutar comandos de forma segura
async function safeExec(command, description) {
  try {
    print(colors.blue, `üîÑ ${description}...`, 2);
    const { stdout, stderr } = await execAsync(command);
    return { success: true, stdout, stderr };
  } catch (error) {
    return { success: false, error: error.message, stderr: error.stderr };
  }
}

// 1. AN√ÅLISIS DE ESTRUCTURA DEL PROYECTO
async function analyzeProjectStructure() {
  separator('üìÅ AN√ÅLISIS DE ESTRUCTURA DEL PROYECTO');
  
  const requiredDirs = ['backend', 'frontend', 'scripts', 'db'];
  const requiredFiles = ['package.json', 'README.md', 'deploy.sh'];
  
  let score = 0;
  let totalChecks = requiredDirs.length + requiredFiles.length;
  
  print(colors.yellow, 'üìÇ Verificando directorios cr√≠ticos:', 2);
  for (const dir of requiredDirs) {
    if (fs.existsSync(dir)) {
      print(colors.green, `‚úÖ ${dir}/`, 4);
      score++;
    } else {
      print(colors.red, `‚ùå ${dir}/ - FALTANTE`, 4);
    }
  }
  
  print(colors.yellow, '\nüìÑ Verificando archivos cr√≠ticos:', 2);
  for (const file of requiredFiles) {
    if (fs.existsSync(file)) {
      print(colors.green, `‚úÖ ${file}`, 4);
      score++;
    } else {
      print(colors.red, `‚ùå ${file} - FALTANTE`, 4);
    }
  }
  
  return { score, total: totalChecks, percentage: Math.round((score / totalChecks) * 100) };
}

// 2. AN√ÅLISIS DEL BACKEND
async function analyzeBackend() {
  separator('üöÄ AN√ÅLISIS DEL BACKEND');
  
  const results = {};
  
  // Verificar archivos cr√≠ticos del backend
  print(colors.yellow, 'üìÅ Verificando estructura del backend:', 2);
  const backendFiles = [
    'backend/index.js',
    'backend/package.json',
    'backend/lib/tursoClient.js',
    'backend/middleware/errorHandler.js',
    'backend/routes/',
    'backend/controllers/',
    'backend/services/'
  ];
  
  let backendScore = 0;
  for (const file of backendFiles) {
    if (fs.existsSync(file)) {
      print(colors.green, `‚úÖ ${file}`, 4);
      backendScore++;
    } else {
      print(colors.red, `‚ùå ${file} - FALTANTE`, 4);
    }
  }
  
  results.structure = { score: backendScore, total: backendFiles.length };
  
  // Verificar dependencias del backend
  print(colors.yellow, '\nüì¶ Verificando dependencias del backend:', 2);
  if (fs.existsSync('backend/package.json')) {
    const packageJson = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
    const requiredDeps = ['express', 'cors', 'dotenv', '@libsql/client', 'bcrypt'];
    
    let depScore = 0;
    for (const dep of requiredDeps) {
      if (packageJson.dependencies && packageJson.dependencies[dep]) {
        print(colors.green, `‚úÖ ${dep}`, 4);
        depScore++;
      } else {
        print(colors.red, `‚ùå ${dep} - FALTANTE`, 4);
      }
    }
    
    results.dependencies = { score: depScore, total: requiredDeps.length };
  }
  
  // Verificar conexi√≥n a base de datos
  print(colors.yellow, '\nüóÑÔ∏è Verificando configuraci√≥n de base de datos:', 2);
  if (fs.existsSync('backend/.env') || fs.existsSync('backend/env.production')) {
    print(colors.green, '‚úÖ Archivos de configuraci√≥n encontrados', 4);
    results.database = { configured: true };
  } else {
    print(colors.red, '‚ùå Archivos de configuraci√≥n no encontrados', 4);
    results.database = { configured: false };
  }
  
  return results;
}

// 3. AN√ÅLISIS DEL FRONTEND
async function analyzeFrontend() {
  separator('üé® AN√ÅLISIS DEL FRONTEND');
  
  const results = {};
  
  // Verificar estructura del frontend
  print(colors.yellow, 'üìÅ Verificando estructura del frontend:', 2);
  const frontendFiles = [
    'frontend/package.json',
    'frontend/vite.config.js',
    'frontend/src/',
    'frontend/src/components/',
    'frontend/src/hooks/',
    'frontend/src/lib/',
    'frontend/public/'
  ];
  
  let frontendScore = 0;
  for (const file of frontendFiles) {
    if (fs.existsSync(file)) {
      print(colors.green, `‚úÖ ${file}`, 4);
      frontendScore++;
    } else {
      print(colors.red, `‚ùå ${file} - FALTANTE`, 4);
    }
  }
  
  results.structure = { score: frontendScore, total: frontendFiles.length };
  
  // Verificar dependencias cr√≠ticas
  print(colors.yellow, '\nüì¶ Verificando dependencias del frontend:', 2);
  if (fs.existsSync('frontend/package.json')) {
    const packageJson = JSON.parse(fs.readFileSync('frontend/package.json', 'utf8'));
    const requiredDeps = ['react', 'vite', '@tanstack/react-query', 'tailwindcss', 'axios'];
    
    let depScore = 0;
    for (const dep of requiredDeps) {
      const hasDep = (packageJson.dependencies && packageJson.dependencies[dep]) ||
                     (packageJson.devDependencies && packageJson.devDependencies[dep]);
      if (hasDep) {
        print(colors.green, `‚úÖ ${dep}`, 4);
        depScore++;
      } else {
        print(colors.red, `‚ùå ${dep} - FALTANTE`, 4);
      }
    }
    
    results.dependencies = { score: depScore, total: requiredDeps.length };
  }
  
  return results;
}

// 4. AN√ÅLISIS DE TESTS
async function analyzeTests() {
  separator('üß™ AN√ÅLISIS DE TESTS');
  
  const results = {};
  
  // Buscar archivos de test
  print(colors.yellow, 'üîç Buscando archivos de test:', 2);
  const testPatterns = [
    'test*.js',
    '*test*.js',
    '*.test.js',
    'backend/tests/',
    'frontend/cypress/'
  ];
  
  let testFiles = [];
  for (const pattern of testPatterns) {
    try {
      if (pattern.includes('/')) {
        if (fs.existsSync(pattern)) {
          const files = fs.readdirSync(pattern);
          testFiles.push(...files.map(f => path.join(pattern, f)));
        }
      } else {
        // Buscar archivos con patr√≥n en ra√≠z
        const files = fs.readdirSync('.');
        const matching = files.filter(f => {
          return pattern.includes('*') ? 
            f.includes(pattern.replace('*', '')) : 
            f === pattern;
        });
        testFiles.push(...matching);
      }
    } catch (error) {
      // Ignorar errores de b√∫squeda
    }
  }
  
  if (testFiles.length > 0) {
    print(colors.green, `‚úÖ Encontrados ${testFiles.length} archivos de test`, 4);
    testFiles.slice(0, 10).forEach(file => {
      print(colors.white, `üìÑ ${file}`, 6);
    });
    if (testFiles.length > 10) {
      print(colors.dim, `... y ${testFiles.length - 10} m√°s`, 6);
    }
  } else {
    print(colors.red, '‚ùå No se encontraron archivos de test', 4);
  }
  
  results.testFiles = testFiles.length;
  
  return results;
}

// 5. AN√ÅLISIS DE SEGURIDAD
async function analyzeSecurity() {
  separator('üîí AN√ÅLISIS DE SEGURIDAD');
  
  const results = {};
  
  // Verificar archivos de configuraci√≥n sensibles
  print(colors.yellow, 'üîê Verificando archivos sensibles:', 2);
  const sensitiveFiles = ['.env', 'backend/.env', 'config.json', 'secrets.json'];
  const exposedFiles = [];
  
  for (const file of sensitiveFiles) {
    if (fs.existsSync(file)) {
      print(colors.yellow, `‚ö†Ô∏è ${file} - PRESENTE (verificar .gitignore)`, 4);
      exposedFiles.push(file);
    } else {
      print(colors.green, `‚úÖ ${file} - NO EXPUESTO`, 4);
    }
  }
  
  // Verificar .gitignore
  print(colors.yellow, '\nüìù Verificando .gitignore:', 2);
  if (fs.existsSync('.gitignore')) {
    const gitignore = fs.readFileSync('.gitignore', 'utf8');
    const protectedPatterns = ['.env', 'node_modules', '*.log', 'dist/', 'build/'];
    let protectedCount = 0;
    
    for (const pattern of protectedPatterns) {
      if (gitignore.includes(pattern)) {
        print(colors.green, `‚úÖ ${pattern} protegido`, 4);
        protectedCount++;
      } else {
        print(colors.red, `‚ùå ${pattern} NO protegido`, 4);
      }
    }
    
    results.gitignore = { score: protectedCount, total: protectedPatterns.length };
  } else {
    print(colors.red, '‚ùå .gitignore no encontrado', 4);
    results.gitignore = { score: 0, total: 5 };
  }
  
  results.exposedFiles = exposedFiles.length;
  
  return results;
}

// 6. AN√ÅLISIS DE RENDIMIENTO
async function analyzePerformance() {
  separator('‚ö° AN√ÅLISIS DE RENDIMIENTO');
  
  const results = {};
  
  // Verificar tama√±o de archivos
  print(colors.yellow, 'üìè Analizando tama√±o de archivos:', 2);
  
  try {
    // Verificar package-lock.json
    if (fs.existsSync('package-lock.json')) {
      const stats = fs.statSync('package-lock.json');
      const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
      print(colors.white, `üì¶ package-lock.json: ${sizeMB} MB`, 4);
    }
    
    // Verificar base de datos
    if (fs.existsSync('data.db')) {
      const stats = fs.statSync('data.db');
      const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
      print(colors.white, `üóÑÔ∏è data.db: ${sizeMB} MB`, 4);
    }
    
    // Verificar node_modules si existe
    if (fs.existsSync('node_modules')) {
      const result = await safeExec('du -sh node_modules 2>/dev/null || echo "No disponible"', 'Calculando tama√±o de node_modules');
      if (result.success) {
        print(colors.white, `üìö node_modules: ${result.stdout.trim().split('\t')[0]}`, 4);
      }
    }
    
    results.analyzed = true;
  } catch (error) {
    print(colors.red, '‚ùå Error analizando archivos', 4);
    results.analyzed = false;
  }
  
  return results;
}

// 7. EJECUCI√ìN DE TESTS DISPONIBLES
async function runAvailableTests() {
  separator('üèÉ EJECUCI√ìN DE TESTS DISPONIBLES');
  
  const results = {};
  
  // Intentar ejecutar tests del backend
  print(colors.yellow, 'üß™ Ejecutando tests del backend:', 2);
  if (fs.existsSync('backend/package.json')) {
    const backendPkg = JSON.parse(fs.readFileSync('backend/package.json', 'utf8'));
    if (backendPkg.scripts && backendPkg.scripts.test) {
      const result = await safeExec('cd backend && npm test', 'Tests del backend');
      if (result.success) {
        print(colors.green, '‚úÖ Tests del backend ejecutados correctamente', 4);
        results.backend = 'success';
      } else {
        print(colors.red, '‚ùå Tests del backend fallaron', 4);
        results.backend = 'failed';
      }
    } else {
      print(colors.yellow, '‚ö†Ô∏è No hay script de test configurado en backend', 4);
      results.backend = 'no-config';
    }
  }
  
  // Intentar ejecutar tests del frontend
  print(colors.yellow, '\nüß™ Ejecutando tests del frontend:', 2);
  if (fs.existsSync('frontend/package.json')) {
    const frontendPkg = JSON.parse(fs.readFileSync('frontend/package.json', 'utf8'));
    if (frontendPkg.scripts && frontendPkg.scripts.test) {
      const result = await safeExec('cd frontend && npm test -- --run', 'Tests del frontend');
      if (result.success) {
        print(colors.green, '‚úÖ Tests del frontend ejecutados correctamente', 4);
        results.frontend = 'success';
      } else {
        print(colors.red, '‚ùå Tests del frontend fallaron', 4);
        results.frontend = 'failed';
      }
    } else {
      print(colors.yellow, '‚ö†Ô∏è No hay script de test configurado en frontend', 4);
      results.frontend = 'no-config';
    }
  }
  
  return results;
}

// 8. GENERACI√ìN DEL REPORTE FINAL
function generateFinalReport(results) {
  separator('üìä REPORTE T√âCNICO FINAL', '*');
  
  const timestamp = new Date().toLocaleString('es-ES');
  print(colors.cyan + colors.bold, `üïí Generado: ${timestamp}`, 2);
  print(colors.cyan + colors.bold, `üè¢ Proyecto: ISOFlow3 - Sistema de Gesti√≥n de Calidad`, 2);
  
  // Calcular puntuaci√≥n general
  let totalScore = 0;
  let maxScore = 0;
  
  // Estructura del proyecto
  if (results.structure) {
    totalScore += results.structure.score;
    maxScore += results.structure.total;
  }
  
  // Backend
  if (results.backend) {
    totalScore += results.backend.structure.score + results.backend.dependencies.score;
    maxScore += results.backend.structure.total + results.backend.dependencies.total;
  }
  
  // Frontend
  if (results.frontend) {
    totalScore += results.frontend.structure.score + results.frontend.dependencies.score;
    maxScore += results.frontend.structure.total + results.frontend.dependencies.total;
  }
  
  // Seguridad
  if (results.security && results.security.gitignore) {
    totalScore += results.security.gitignore.score;
    maxScore += results.security.gitignore.total;
  }
  
  const overallPercentage = maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 0;
  
  print(colors.white, '\nüìà PUNTUACI√ìN GENERAL:', 2);
  print(colors.white, `   Puntos obtenidos: ${totalScore}/${maxScore}`, 4);
  
  if (overallPercentage >= 90) {
    print(colors.green + colors.bold, `   Estado: EXCELENTE (${overallPercentage}%)`, 4);
  } else if (overallPercentage >= 75) {
    print(colors.yellow + colors.bold, `   Estado: BUENO (${overallPercentage}%)`, 4);
  } else if (overallPercentage >= 60) {
    print(colors.yellow + colors.bold, `   Estado: REGULAR (${overallPercentage}%)`, 4);
  } else {
    print(colors.red + colors.bold, `   Estado: REQUIERE ATENCI√ìN (${overallPercentage}%)`, 4);
  }
  
  // Recomendaciones
  print(colors.magenta + colors.bold, '\nüí° RECOMENDACIONES:', 2);
  
  if (results.structure && results.structure.percentage < 100) {
    print(colors.yellow, '‚Ä¢ Completar estructura b√°sica del proyecto', 4);
  }
  
  if (results.backend && (!results.backend.database || !results.backend.database.configured)) {
    print(colors.yellow, '‚Ä¢ Configurar correctamente la base de datos', 4);
  }
  
  if (results.tests && results.tests.testFiles === 0) {
    print(colors.yellow, '‚Ä¢ Implementar suite de tests automatizados', 4);
  }
  
  if (results.security && results.security.exposedFiles > 0) {
    print(colors.red, '‚Ä¢ Revisar archivos sensibles expuestos', 4);
  }
  
  if (overallPercentage >= 90) {
    print(colors.green, '‚Ä¢ El proyecto est√° en excelente estado t√©cnico', 4);
  }
  
  // Informaci√≥n de contacto y pr√≥ximos pasos
  print(colors.cyan + colors.bold, '\nüîÑ PR√ìXIMOS PASOS:', 2);
  print(colors.white, '1. Revisar las recomendaciones listadas arriba', 4);
  print(colors.white, '2. Ejecutar tests espec√≠ficos si est√°n disponibles', 4);
  print(colors.white, '3. Verificar el funcionamiento en ambiente de desarrollo', 4);
  print(colors.white, '4. Programar siguiente control t√©cnico', 4);
  
  separator('fin del reporte', '=');
}

// FUNCI√ìN PRINCIPAL
async function runTechnicalControl() {
  print(colors.cyan + colors.bold, 'üöÄ INICIANDO CONTROL T√âCNICO COMPLETO...\n');
  
  const results = {};
  
  try {
    // Ejecutar todos los an√°lisis
    results.structure = await analyzeProjectStructure();
    results.backend = await analyzeBackend();
    results.frontend = await analyzeFrontend();
    results.tests = await analyzeTests();
    results.security = await analyzeSecurity();
    results.performance = await analyzePerformance();
    results.testExecution = await runAvailableTests();
    
    // Generar reporte final
    generateFinalReport(results);
    
  } catch (error) {
    print(colors.red + colors.bold, `\n‚ùå ERROR DURANTE EL CONTROL T√âCNICO:`);
    print(colors.red, error.message, 2);
    print(colors.yellow, '\n‚ö†Ô∏è Se gener√≥ un reporte parcial con la informaci√≥n disponible.');
    generateFinalReport(results);
  }
}

// Ejecutar el control t√©cnico
if (import.meta.url === `file://${process.argv[1]}`) {
  runTechnicalControl()
    .then(() => {
      print(colors.green + colors.bold, '\n‚úÖ Control t√©cnico completado exitosamente!');
      process.exit(0);
    })
    .catch((error) => {
      print(colors.red + colors.bold, '\n‚ùå Error fatal en control t√©cnico:');
      print(colors.red, error.message, 2);
      process.exit(1);
    });
}

export default runTechnicalControl;